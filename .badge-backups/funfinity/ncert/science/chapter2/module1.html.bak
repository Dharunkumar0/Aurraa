<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Diversity in Plants and Animals (Animated)</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
<style>
body {
  margin: 0;
  font-family: "Poppins", sans-serif;
  background: linear-gradient(135deg, #a1ffce, #faffd1);
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}
.card {
  position: relative;
  overflow: hidden;
  background: #f0fff3;
  border-radius: 16px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
  width: 90%;
  max-width: 950px;
  padding: 20px;
  text-align: center;
}
svg.background-shapes {
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
  overflow: hidden;
  z-index: 0;
}
svg.foreground {
  width: 100%;
  height: 300px;
  overflow: visible;
  position: relative;
  z-index: 1;
}
.caption {
  font-size: 1rem;
  margin-top: 12px;
  background: rgba(0,0,0,0.05);
  padding: 8px 16px;
  border-radius: 10px;
  display: inline-block;
  color: #222;
  position: relative;
  z-index: 2;
  transition: all 0.3s;
}
button, select {
  margin: 8px;
  padding: 10px 16px;
  border: none;
  border-radius: 10px;
  font-size: 0.95rem;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.2s;
}
#replayBtn { background: #ff7b54; color: #fff; display: none; }
#playPauseBtn { background: #4CAF50; color: #fff; }
#replayBtn:hover { background: #ff5722; }
#playPauseBtn:hover { background: #2e7d32; }
select { background: #2196F3; color: #fff; }
.emoji { text-anchor: middle; dominant-baseline: middle; font-size: 60px; }
.label { font-weight: bold; font-size: 16px; fill: #111; }
</style>
</head>
<body>

<div class="card">
  <h2>üåç Chapter 2: Diversity in the Living World</h2>
  <h3>Plants and Animals Around Us</h3>

  <!-- Background shapes -->
  <svg class="background-shapes">
    <circle cx="50" cy="50" r="20" fill="#FFEB3B" opacity="0.6"/>
    <circle cx="300" cy="80" r="25" fill="#FF5722" opacity="0.5"/>
    <rect x="600" y="30" width="40" height="40" fill="#03A9F4" opacity="0.5"/>
    <polygon points="150,200 170,240 130,240" fill="#4CAF50" opacity="0.5"/>
    <circle cx="800" cy="150" r="30" fill="#E91E63" opacity="0.4"/>
  </svg>

  <!-- Foreground emojis -->
  <svg class="foreground" viewBox="0 0 900 300">
    <g id="plant1"><text x="150" y="80" class="emoji">üå≥</text><text class="label" x="150" y="140">Tree</text></g>
    <g id="plant2"><text x="350" y="80" class="emoji">üåø</text><text class="label" x="350" y="140">Shrub</text></g>
    <g id="animal1"><text x="550" y="80" class="emoji">üêØ</text><text class="label" x="550" y="140">Tiger</text></g>
    <g id="animal2"><text x="750" y="80" class="emoji">üêü</text><text class="label" x="750" y="140">Fish</text></g>
  </svg>

  <div id="caption" class="caption">
    Let‚Äôs explore the diversity in plants and animals around us!
  </div>

  <div>
    <select id="languageSelect" aria-label="Select language">
      <option value="en">English</option>
      <option value="hi">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (Hindi)</option>
      <option value="ta">‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)</option>
      <option value="kn">‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)</option>
    </select>
    <button id="playPauseBtn">‚ñ∂ Play</button>
    <button id="replayBtn">üîÑ Replay</button>
  </div>
</div>

<script>
const caption = document.getElementById("caption");
const playPauseBtn = document.getElementById("playPauseBtn");
const replayBtn = document.getElementById("replayBtn");
const languageSelect = document.getElementById("languageSelect");

let voices = [];
let stepIndex = 0;
let playing = false;
let currentUtterance = null;
let currentLang = languageSelect.value;

const captions = {
  en: [
    "Let‚Äôs explore the diversity in plants and animals around us!",
    "Plants vary greatly: tall trees like banyan üå≥, small shrubs üåø, and herbs üå±.",
    "Animals are diverse too: powerful tigers üêØ, tiny ants üêú, birds ü¶ú, and fish üêü.",
    "Each organism is adapted to its environment, like fish swimming in water üåä.",
    "Together, plants and animals maintain balance in ecosystems üåç."
  ],
  hi: [
    "‡§Ü‡§á‡§è ‡§π‡§Æ ‡§Ö‡§™‡§®‡•á ‡§ö‡§æ‡§∞‡•ã‡§Ç ‡§ì‡§∞ ‡§™‡•å‡§ß‡•ã‡§Ç ‡§î‡§∞ ‡§ú‡§æ‡§®‡§µ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡•á‡§Ç!",
    "‡§™‡•å‡§ß‡•á ‡§ï‡§à ‡§∞‡•Ç‡§™‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç: ‡§¨‡§°‡§º‡•á ‡§µ‡•É‡§ï‡•ç‡§∑ üå≥, ‡§õ‡•ã‡§ü‡•á ‡§ù‡§æ‡§°‡§º‡§ø‡§Ø‡§æ‡§Å üåø ‡§î‡§∞ ‡§ú‡§°‡§º‡•Ä-‡§¨‡•Ç‡§ü‡§ø‡§Ø‡§æ‡§Å üå±‡•§",
    "‡§ú‡§æ‡§®‡§µ‡§∞ ‡§≠‡•Ä ‡§µ‡§ø‡§µ‡§ø‡§ß ‡§π‡•à‡§Ç: ‡§¨‡§æ‡§ò üêØ, ‡§ö‡•Ä‡§Ç‡§ü‡§ø‡§Ø‡§æ‡§Å üêú, ‡§™‡§ï‡•ç‡§∑‡•Ä ü¶ú ‡§î‡§∞ ‡§Æ‡§õ‡§≤‡§ø‡§Ø‡§æ‡§Å üêü‡•§",
    "‡§π‡§∞ ‡§ú‡•Ä‡§µ ‡§Ö‡§™‡§®‡•á ‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¢‡§≤‡§æ ‡§π‡•Å‡§Ü ‡§π‡•à, ‡§ú‡•à‡§∏‡•á ‡§Æ‡§õ‡§≤‡•Ä ‡§™‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§§‡•à‡§∞‡§§‡•Ä ‡§π‡•à üåä‡•§",
    "‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§™‡•å‡§ß‡•á ‡§î‡§∞ ‡§ú‡§æ‡§®‡§µ‡§∞ ‡§™‡§æ‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§ï‡•Ä ‡§§‡§Ç‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡§§‡•á ‡§π‡•à‡§Ç üåç‡•§"
  ],
  ta: [
    "‡Æ®‡ÆÆ‡Øç ‡Æö‡ØÅ‡Æ±‡Øç‡Æ±‡Æø‡ÆØ‡ØÅ‡Æ≥‡Øç‡Æ≥ ‡Æ§‡Ææ‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ≤‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Æø‡Æ©‡Øç ‡Æ™‡Æ≤‡Øç‡Æµ‡Æï‡Øà‡Æ§‡Øç‡Æ§‡Æ©‡Øç‡ÆÆ‡Øà‡ÆØ‡Øà ‡ÆÖ‡Æ±‡Æø‡Æ®‡Øç‡Æ§‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æµ‡Øã‡ÆÆ‡Øç!",
    "‡ÆÆ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç üå≥, ‡Æ™‡ØÅ‡Æ§‡Æ∞‡Øç‡Æï‡Æ≥‡Øç üåø, ‡ÆÆ‡ØÇ‡Æ≤‡Æø‡Æï‡Øà‡Æï‡Æ≥‡Øç üå± ‡Æé‡Æ© ‡Æ§‡Ææ‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æ≤ ‡Æµ‡Æï‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ©.",
    "‡Æµ‡Æø‡Æ≤‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æ≤‡Øç‡Æµ‡Øá‡Æ±‡ØÅ: ‡Æ™‡ØÅ‡Æ≤‡Æø üêØ, ‡Æé‡Æ±‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ üêú, ‡Æ™‡Æ±‡Æµ‡Øà‡Æï‡Æ≥‡Øç ü¶ú, ‡ÆÆ‡ØÄ‡Æ©‡Øç üêü.",
    "‡Æí‡Æµ‡Øç‡Æµ‡Øä‡Æ∞‡ØÅ ‡Æâ‡ÆØ‡Æø‡Æ∞‡Æø‡Æ©‡ÆÆ‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ§‡Æ©‡Øç ‡Æö‡ØÇ‡Æ¥‡Æ≤‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æè‡Æ±‡Øç‡Æ™ ‡Æ§‡Æ©‡Øç‡Æ©‡Øà ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Æø‡Æï‡Øç ‡Æï‡Øä‡Æ≥‡Øç‡Æï‡Æø‡Æ±‡Æ§‡ØÅ. ‡ÆÆ‡ØÄ‡Æ©‡Øç‡Æï‡Æ≥‡Øç ‡Æ®‡ØÄ‡Æ∞‡Æø‡Æ≤‡Øç ‡Æ®‡ØÄ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æø‡Æ©‡Øç‡Æ±‡Æ© üåä.",
    "‡Æ§‡Ææ‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ≤‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡ØÅ‡ÆÆ‡Øç ‡Æö‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÅ ‡Æö‡ØÅ‡Æ±‡Øç‡Æ±‡ØÅ‡Æö‡Øç‡Æö‡ØÇ‡Æ¥‡Æ≤‡Æø‡Æ≤‡Øç ‡Æö‡ÆÆ‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Øà‡Æ™‡Øç ‡Æ™‡Øá‡Æ£‡ØÅ‡Æï‡Æø‡Æ©‡Øç‡Æ±‡Æ© üåç."
  ],
  kn: [
    "‡≤®‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤≤‡≤ø‡≤∞‡≥Å‡≤µ ‡≤∏‡≤∏‡≥ç‡≤Ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤™‡≥ç‡≤∞‡≤æ‡≤£‡≤ø‡≤ó‡≤≥ ‡≤µ‡≥à‡≤µ‡≤ø‡≤ß‡≥ç‡≤Ø‡≤§‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≤ø‡≤≥‡≤ø‡≤Ø‡≥ã‡≤£!",
    "‡≤Æ‡≤∞‡≤ó‡≤≥‡≥Å üå≥, ‡≤ó‡≤ø‡≤°‡≤ó‡≤≥‡≥Å üåø, ‡≤î‡≤∑‡≤ß‡≤ø ‡≤∏‡≤∏‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å üå± ‡≤á‡≤§‡≥ç‡≤Ø‡≤æ‡≤¶‡≤ø ‡≤∏‡≤∏‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å ‡≤á‡≤µ‡≥Ü.",
    "‡≤™‡≥ç‡≤∞‡≤æ‡≤£‡≤ø‡≤ó‡≤≥‡≥Ç ‡≤µ‡≥à‡≤µ‡≤ø‡≤ß‡≥ç‡≤Ø‡≤Æ‡≤Ø: ‡≤π‡≥Å‡≤≤‡≤ø üêØ, ‡≤á‡≤∞‡≥Å‡≤µ‡≥Ü üêú, ‡≤π‡≤ï‡≥ç‡≤ï‡≤ø‡≤ó‡≤≥‡≥Å ü¶ú, ‡≤Æ‡≥Ä‡≤®‡≥Å‡≤ó‡≤≥‡≥Å üêü.",
    "‡≤™‡≥ç‡≤∞‡≤§‡≤ø ‡≤ú‡≥Ä‡≤µ‡≤ø‡≤Ø‡≥Ç ‡≤§‡≤®‡≥ç‡≤® ‡≤™‡≤∞‡≤ø‡≤∏‡≤∞‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤π‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü. ‡≤Æ‡≥Ä‡≤®‡≥Å‡≤ó‡≤≥‡≥Å ‡≤®‡≥Ä‡≤∞‡≤ø‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤à‡≤ú‡≥Å‡≤§‡≥ç‡≤§‡≤µ‡≥Ü üåä.",
    "‡≤∏‡≤∏‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤™‡≥ç‡≤∞‡≤æ‡≤£‡≤ø‡≤ó‡≤≥‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø ‡≤™‡≤∞‡≤ø‡≤∏‡≤∞‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤∏‡≤Æ‡≤§‡≥ã‡≤≤‡≤®‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤æ‡≤Ø‡≥ç‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≥Å‡≤§‡≥ç‡≤§‡≤µ‡≥Ü üåç."
  ]
};

// Load voices
function loadVoices() {
  voices = speechSynthesis.getVoices();
}
window.speechSynthesis.onvoiceschanged = loadVoices;
loadVoices();

function getVoice(langCode) {
  return voices.find(v => v.lang.toLowerCase().startsWith(langCode)) ||
         voices.find(v => v.lang.toLowerCase().startsWith("en")) || null;
}

function resetPositions() {
  gsap.set("#plant1, #plant2, #animal1, #animal2", {x:0, y:0, scale:1});
}

function animateStep(index) {
  switch(index){
    case 0: gsap.fromTo(["#plant1","#plant2","#animal1","#animal2"], {scale:0.7},{scale:1,duration:0.8,stagger:0.2, ease:"back.out(1.5)"}); break;
    case 1: gsap.to("#plant1",{y:20,scale:1.1,duration:0.9, ease:"elastic.out(1,0.3)"}); break;
    case 2: gsap.to("#animal1",{y:20,scale:1.1,duration:0.9, ease:"elastic.out(1,0.3)"}); break;
    case 3: gsap.to(["#plant2","#animal2"],{y:25,scale:1.05,stagger:0.2,duration:0.9, ease:"elastic.out(1,0.3)"}); break;
    case 4: gsap.to(["#plant1","#plant2","#animal1","#animal2"],{y:120,duration:1,stagger:0.2, ease:"power1.inOut"}); break;
  }
}

function speakAndAnimate(text, index) {
  if(!playing) return;
  caption.textContent = text;
  animateStep(index);

  currentUtterance = new SpeechSynthesisUtterance(text);
  const voice = getVoice(currentLang);
  if(voice) currentUtterance.voice = voice;
  currentUtterance.lang = voice?.lang || "en";

  currentUtterance.onend = () => {
    stepIndex++;
    if(stepIndex < captions[currentLang].length && playing) {
      speakAndAnimate(captions[currentLang][stepIndex], stepIndex);
    } else {
      replayBtn.style.display = "inline-block";
      playPauseBtn.textContent = "‚ñ∂ Play";
      playing = false;
    }
  };
  speechSynthesis.speak(currentUtterance);
}

function runAnimation() {
  stepIndex = 0;
  resetPositions();
  replayBtn.style.display = "none";
  speakAndAnimate(captions[currentLang][0], 0);
}

// Play/Pause button
playPauseBtn.addEventListener("click", () => {
  if(!playing){
    playing = true;
    playPauseBtn.textContent = "‚è∏ Pause";
    runAnimation();
  } else {
    playing = false;
    playPauseBtn.textContent = "‚ñ∂ Play";
    speechSynthesis.cancel();
  }
});

// Replay
replayBtn.addEventListener("click", runAnimation);

// Language selection
languageSelect.addEventListener("change", () => {
  currentLang = languageSelect.value;
  if(playing){
    speechSynthesis.cancel();
    runAnimation();
  }
});

// Background animation
gsap.to(".background-shapes circle, .background-shapes rect, .background-shapes polygon", {
  x: 50,
  rotation: 20,
  scale:1.2,
  yoyo:true,
  repeat:-1,
  duration:6,
  ease:"sine.inOut",
  stagger:0.5
});
</script>
</body>
</html>
