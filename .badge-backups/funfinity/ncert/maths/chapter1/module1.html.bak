<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Comparing & Ordering Large Numbers</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
  <style>
    body {
      margin: 0;
      font-family: "Poppins", sans-serif;
      background: linear-gradient(135deg, #74ebd5, #ACB6E5);
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
    .card {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 16px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
      width: 70%;
      max-width: 700px;
      padding: 20px;
      text-align: center;
    }
    svg { width: 100%; height: auto; }
    .caption {
      font-size: 1rem;
      margin-top: 12px;
      background: rgba(0,0,0,0.05);
      padding: 8px 16px;
      border-radius: 10px;
      display: inline-block;
      color: #222;
    }
    button, select {
      margin: 8px;
      padding: 10px 16px;
      border: none;
      border-radius: 10px;
      font-size: 0.9rem;
      font-weight: bold;
      cursor: pointer;
    }
    #replayBtn { background: #ff7b54; color: #fff; display: none; }
    #pauseBtn { background: #4CAF50; color: #fff; }
    #replayBtn:hover { background: #ff5722; }
    #pauseBtn:hover { background: #2e7d32; }
    select { border: 1px solid #ccc; font-weight: normal; padding: 6px 12px; }
    .numText { font-weight: bold; font-size: 18px; fill: #111; }
  </style>
</head>
<body>
  <div class="card">
    <h2>Knowing Our Numbers</h2>
    <h3>Comparing & Ordering Large Numbers</h3>

    <!-- Language selector -->
    <label for="langSelect">üåê Choose Language: </label>
    <select id="langSelect">
      <option value="en">English</option>
      <option value="hi">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (Hindi)</option>
      <option value="ta">‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)</option>
      <option value="te">‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)</option>
      <option value="or">‡¨ì‡¨°‡¨º‡¨ø‡¨Ü (Odia)</option>
    </select>

    <svg viewBox="0 0 900 400">
      <g id="card1">
        <rect x="0" y="0" width="150" height="80" rx="15" fill="#FFD93D"/>
        <text class="numText" x="75" y="50" text-anchor="middle">78,943</text>
      </g>
      <g id="card2">
        <rect x="0" y="0" width="150" height="80" rx="15" fill="#6BCB77"/>
        <text class="numText" x="75" y="50" text-anchor="middle">56,781</text>
      </g>
      <g id="card3">
        <rect x="0" y="0" width="150" height="80" rx="15" fill="#4D96FF"/>
        <text class="numText" x="75" y="50" text-anchor="middle">89,230</text>
      </g>
      <g id="card4">
        <rect x="0" y="0" width="150" height="80" rx="15" fill="#FF6B6B"/>
        <text class="numText" x="75" y="50" text-anchor="middle">67,892</text>
      </g>
    </svg>

    <div id="caption" class="caption">Let's learn how to compare and order large numbers!</div>
    <br>
    <button id="pauseBtn">‚è∏ Pause</button>
    <button id="replayBtn">üîÑ Replay</button>
  </div>

  <script>
    const caption = document.getElementById("caption");
    const replayBtn = document.getElementById("replayBtn");
    const pauseBtn = document.getElementById("pauseBtn");
    const langSelect = document.getElementById("langSelect");

    let paused = false;
    let currentStepIndex = 0;
    let currentLang = "en";

    // Captions
    const captions = {
      en: [
        "Let's learn how to compare and order large numbers!",
        "We have four numbers: 78,943, 56,781, 89,230, and 67,892.",
        "First, compare the highest place digits. 89,230 is the largest.",
        "Next comes 78,943.",
        "Then comes 67,892.",
        "Finally, 56,781 is the smallest.",
        "Ordered: 56,781 < 67,892 < 78,943 < 89,230"
      ],
      hi: [
        "‡§Ü‡§á‡§è ‡§¨‡§°‡§º‡•á ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ ‡§î‡§∞ ‡§ï‡•ç‡§∞‡§Æ ‡§∏‡•Ä‡§ñ‡§§‡•á ‡§π‡•à‡§Ç!",
        "‡§π‡§Æ‡§æ‡§∞‡•á ‡§™‡§æ‡§∏ ‡§ö‡§æ‡§∞ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§è‡§Å ‡§π‡•à‡§Ç: 78,943, 56,781, 89,230 ‡§î‡§∞ 67,892‡•§",
        "‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á, ‡§∏‡§¨‡§∏‡•á ‡§¨‡§°‡§º‡•á ‡§Ö‡§Ç‡§ï ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§ 89,230 ‡§∏‡§¨‡§∏‡•á ‡§¨‡§°‡§º‡§æ ‡§π‡•à‡•§",
        "‡§Ö‡§ó‡§≤‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ 78,943 ‡§π‡•à‡•§",
        "‡§´‡§ø‡§∞ 67,892 ‡§Ü‡§§‡•Ä ‡§π‡•à‡•§",
        "‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç, 56,781 ‡§∏‡§¨‡§∏‡•á ‡§õ‡•ã‡§ü‡§æ ‡§π‡•à‡•§",
        "‡§ï‡•ç‡§∞‡§Æ: 56,781 < 67,892 < 78,943 < 89,230"
      ],
      ta: [
        "‡Æ™‡ØÜ‡Æ∞‡Æø‡ÆØ ‡Æé‡Æ£‡Øç‡Æï‡Æ≥‡Øà ‡Æí‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Øç‡Æü‡ØÅ ‡Æµ‡Æ∞‡Æø‡Æö‡Øà‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æï‡Øç ‡Æï‡Æ±‡Øç‡Æ™‡Øã‡ÆÆ‡Øç!",
        "‡Æé‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æü‡ÆÆ‡Øç ‡Æ®‡Ææ‡Æ©‡Øç‡Æï‡ØÅ ‡Æé‡Æ£‡Øç‡Æï‡Æ≥‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ©: 78,943, 56,781, 89,230, ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç 67,892.",
        "‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡Æø‡Æ≤‡Øç, ‡Æâ‡ÆØ‡Æ∞‡Øç‡Æ®‡Øç‡Æ§ ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æí‡Æ™‡Øç‡Æ™‡Æø‡Æü‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç. 89,230 ‡ÆÆ‡Æø‡Æï‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ∞‡Æø‡ÆØ‡Æ§‡ØÅ.",
        "‡ÆÖ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æ§‡ØÅ 78,943.",
        "‡Æ™‡Æø‡Æ±‡Æï‡ØÅ 67,892.",
        "‡Æá‡Æ±‡ØÅ‡Æ§‡Æø‡ÆØ‡Ææ‡Æï, 56,781 ‡ÆÆ‡Æø‡Æï‡Æö‡Øç ‡Æö‡Æø‡Æ±‡Æø‡ÆØ‡Æ§‡ØÅ.",
        "‡Æµ‡Æ∞‡Æø‡Æö‡Øà: 56,781 < 67,892 < 78,943 < 89,230"
      ],
      te: [
        "‡∞™‡±Ü‡∞¶‡±ç‡∞¶ ‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø‡∞≤‡∞®‡±Å ‡∞™‡±ã‡∞≤‡±ç‡∞ö‡∞ø ‡∞ï‡±ç‡∞∞‡∞Æ‡∞™‡∞∞‡∞ö‡∞°‡∞Ç ‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±Å‡∞Ç‡∞¶‡∞æ‡∞Ç!",
        "‡∞Æ‡∞æ‡∞ï‡±Å ‡∞®‡∞æ‡∞≤‡±Å‡∞ó‡±Å ‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø‡∞≤‡±Å ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø: 78,943, 56,781, 89,230, ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å 67,892.",
        "‡∞Æ‡±ä‡∞¶‡∞ü, ‡∞Ö‡∞§‡±ç‡∞Ø‡∞ß‡∞ø‡∞ï ‡∞Ö‡∞Ç‡∞ï‡±Ü‡∞®‡±Å ‡∞™‡±ã‡∞≤‡±ç‡∞ö‡∞Ç‡∞°‡∞ø. 89,230 ‡∞™‡±Ü‡∞¶‡±ç‡∞¶‡∞¶‡∞ø.",
        "‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ 78,943.",
        "‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ 67,892.",
        "‡∞ö‡∞ø‡∞µ‡∞∞‡∞ó‡∞æ, 56,781 ‡∞ö‡∞ø‡∞®‡±ç‡∞®‡∞¶‡∞ø.",
        "‡∞ï‡±ç‡∞∞‡∞Æ‡∞Ç: 56,781 < 67,892 < 78,943 < 89,230"
      ],
      or: [
        "‡¨Ü‡¨∏‡¨®‡≠ç‡¨§‡≠Å, ‡¨¨‡¨°‡¨º ‡¨∏‡¨Ç‡¨ñ‡≠ç‡≠ü‡¨æ‡¨ó‡≠Å‡¨°‡¨º‡¨ø‡¨ï‡≠Å ‡¨§‡≠Å‡¨≥‡¨®‡¨æ ‡¨è‡¨¨‡¨Ç ‡¨¨‡≠ç‡≠ü‡¨¨‡¨∏‡≠ç‡¨•‡¨ø‡¨§ ‡¨ï‡¨∞‡¨ø‡¨¨‡¨æ‡¨ï‡≠Å ‡¨∂‡¨ø‡¨ñ‡¨ø‡¨¨‡¨æ!",
        "‡¨Ü‡¨Æ ‡¨™‡¨æ‡¨ñ‡¨∞‡≠á ‡¨ö‡¨æ‡¨∞‡¨ø‡¨ü‡¨ø ‡¨∏‡¨Ç‡¨ñ‡≠ç‡≠ü‡¨æ ‡¨Ö‡¨õ‡¨ø: 78,943, 56,781, 89,230 ‡¨è‡¨¨‡¨Ç 67,892‡•§",
        "‡¨™‡≠ç‡¨∞‡¨•‡¨Æ‡≠á, ‡¨∏‡¨∞‡≠ç‡¨¨‡≠ã‡¨ö‡≠ç‡¨ö ‡¨∏‡≠ç‡¨•‡¨æ‡¨®‡¨∞ ‡¨Ö‡¨ô‡≠ç‡¨ï‡¨∞ ‡¨∏‡¨π‡¨ø‡¨§ ‡¨§‡≠Å‡¨≥‡¨®‡¨æ ‡¨ï‡¨∞‡•§ 89,230 ‡¨∏‡¨¨‡≠Å‡¨†‡¨æ‡¨∞‡≠Å ‡¨¨‡¨°‡¨º‡•§",
        "‡¨§‡¨æ‡¨™‡¨∞‡≠á 78,943 ‡¨Ü‡¨∏‡≠á‡•§",
        "‡¨™‡¨∞‡≠á 67,892‡•§",
        "‡¨∂‡≠á‡¨∑‡¨∞‡≠á, 56,781 ‡¨∏‡¨¨‡≠Å‡¨†‡¨æ‡¨∞‡≠Å ‡¨õ‡≠ã‡¨ü‡•§",
        "‡¨ï‡≠ç‡¨∞‡¨Æ: 56,781 < 67,892 < 78,943 < 89,230"
      ]
    };

    // Voice mapping
    const voicesMap = { en: "en-IN", hi: "hi-IN", ta: "ta-IN", te: "te-IN", or: "or-IN" };

    function speak(text, lang, callback) {
      if (paused) return; // don't speak when paused
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = voicesMap[lang] || "en-IN";
      utterance.rate = 0.95;
      utterance.onend = () => { if (!paused) callback(); };
      window.speechSynthesis.cancel();
      window.speechSynthesis.speak(utterance);
    }

    function runStep() {
      if (currentStepIndex >= captions[currentLang].length) {
        replayBtn.style.display = "inline-block";
        return;
      }
      caption.textContent = captions[currentLang][currentStepIndex];

      // Animations
      if (currentStepIndex === 1) gsap.to(["#card1", "#card2", "#card3", "#card4"], {duration: 0.6, scale: 1.1, yoyo: true, repeat: 1, stagger: 0.2});
      if (currentStepIndex === 2) gsap.to("#card3", {duration: 1, y: 50});
      if (currentStepIndex === 3) gsap.to("#card1", {duration: 1, y: 50});
      if (currentStepIndex === 4) gsap.to("#card4", {duration: 1, y: 50});
      if (currentStepIndex === 5) gsap.to("#card2", {duration: 1, y: 50});
      if (currentStepIndex === 6) {
        gsap.to("#card2", {duration: 1, x: 150, y: 300});
        gsap.to("#card4", {duration: 1, x: 300, y: 300});
        gsap.to("#card1", {duration: 1, x: 450, y: 300});
        gsap.to("#card3", {duration: 1, x: 600, y: 300});
      }

      speak(captions[currentLang][currentStepIndex], currentLang, () => {
        currentStepIndex++;
        if (!paused) runStep();
      });
    }

    function playAnimation() {
      replayBtn.style.display = "none";
      paused = false;
      currentStepIndex = 0;
      currentLang = langSelect.value;

      // Reset positions
      gsap.set("#card1", {x: 50, y: 150});
      gsap.set("#card2", {x: 250, y: 150});
      gsap.set("#card3", {x: 450, y: 150});
      gsap.set("#card4", {x: 650, y: 150});

      runStep();
    }

    pauseBtn.addEventListener("click", () => {
      if (!paused) {
        paused = true;
        window.speechSynthesis.cancel();
        pauseBtn.textContent = "‚ñ∂ Play";
      } else {
        paused = false;
        pauseBtn.textContent = "‚è∏ Pause";
        runStep();
      }
    });

    replayBtn.addEventListener("click", playAnimation);

    // Only restart on language change if not paused
    langSelect.addEventListener("change", () => {
      currentLang = langSelect.value;
      if (!paused) playAnimation();
      else caption.textContent = captions[currentLang][currentStepIndex] || captions[currentLang][0];
    });

    playAnimation();
  </script>
</body>
</html>
